[{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/Introduction.html","id":"introduction-to-tockymachinelearning-package-suite","dir":"Articles","previous_headings":"","what":"1. Introduction to TockyMachineLearning Package Suite","title":"Introduction to Tocky Random Forest Analysis","text":"TockyRandomForest R package part TockyMachineLearning package suite. TockyMachineLearning package suite comprises several subpackages designed facilitate advanced machine learning analyses flow cytometric data Fluorescent Timer reporters. package within suite specializes different aspects data handling analysis: TockyRandomForest: R package provides Random Forest analysis tools specifically tailored processing interpreting Fluorescent Timer data. TockyConvNetR: R package focused data preprocessing feature cell analysis suitable Convolutional Neural Network (ConvNet) analyses. package facilitates image conversion methods preparing Tocky data implements Inverse GradCAM Gating Analysis interpret ConvNet/Grad-CAM outputs. TockyConvNetPy: Python package dedicated performing ConvNet training conducting Grad-CAM analysis, complementing R-based preprocessing analysis tools. schematic figure providing overview workflows interactions within TockyMachineLearning suite.  Tocky short “Timer--cell-kinetics--activity,” inspired Japanese word “toki,” meaning “time.” serves comprehensive toolkit integrates experimental computational approaches analyze temporal dynamics cell differentiation activation vivo.","code":""},{"path":[]},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/Introduction.html","id":"the-use-of-fluorescent-timer-protein-for-investigating-cellular-dynamics","dir":"Articles","previous_headings":"2. Principles of Tocky","what":"2-1. The Use of Fluorescent Timer Protein for Investigating Cellular Dynamics","title":"Introduction to Tocky Random Forest Analysis","text":"concept Tocky technology conceived created Dr. Masahiro Ono. measure time-dependent processes individual T cells vivo, Dr. Ono envisioned using substance capable encoding time information known kinetics. screening experiments, mCherry mutant, Fluorescent Timer protein Fast-FT, originally developed Verkhusha group Einstein (Subach et al. (2009)), emerged ideal candidate, particularly compatibility flow cytometry. Leveraging feature, Ono lab developed new Fluorescent Timer reporter transgenic mouse strains analyzing T cell activities differentiation vivo. new transgenic strains include Nr4a3 Fluorescent Timer reporter mice Nr4a3 gene, downstream T cell receptor signaling, Foxp3 gene, specific regulatory T cells. effectively analyze data generated Tocky mice, Dr. Ono developed data analytic concepts dedicated Fluorescent Timer data, using Trigonometric Transformation method analyzing Fluorescent Timer data, reported 2018 (Bending, Martin, et al. (2018)). Consequently, novel Fluorescent Timer systems analysis temporal changes molecular cellular activities designated Nr4a3-Tocky Foxp3-Tocky.  Fluorescent Timer protein undergoes spontaneous irreversible transition emission spectrum, shifting blue red fluorescence post-translation. experimental measurements fluorescence revealed half-life Timer Blue fluorescence approximately 4 hours, whereas half-life Timer Red fluorescence extends 120 hours (Bending, Martin, et al. (2018)).","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/Introduction.html","id":"tocky-data-transformation","dir":"Articles","previous_headings":"2. Principles of Tocky","what":"2-2. Tocky Data Transformation","title":"Introduction to Tocky Random Forest Analysis","text":"primary objective Tocky approach analyze time-related information captured profiles Timer-Blue Timer-Red fluorescence data individual cell level. optimally utilize temporal information single-cell analysis, introduced novel concept along appropriate algorithms. tools designed normalize transform Timer fluorescence data two key metrics: Timer Angle Timer Intensity. Timer Angle defined angle (degrees, ranging 0 90) measured Timer-Blue axis towards Timer-Red axis. Timer Intensity represents distance (norm) cell origin (Timer-Blue = Timer-Red = 0). Normalized trigonometric-transformed Timer fluorescence data offer opportunities analyze real-time transcriptional activities cumulative (historical) activities observed days leading experimental analysis cells, demonstrated previous reports (Bending, Martin, et al. (2018); Bending, Paduraru, et al. (2018)).","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/Introduction.html","id":"data-preprocessing","dir":"Articles","previous_headings":"","what":"3. Data Preprocessing","title":"Introduction to Tocky Random Forest Analysis","text":"Install use TockyPrep R package preprocess flow cytometric Fluorescent Timer data (Ono (2024)).","code":""},{"path":[]},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to TockyRandomForest Analysis","text":"Fluorescent Timer proteins uniquely change emission spectra time, serving powerful tools monitoring dynamic processes within cells. recent efforts successfully implemented data preprocessing methods TockyPrep package (Ono (2024b)). Additionally, analyze Timer fluorescence dynamics apply quantitative statistical analysis methods, developed TockyLocus package (Ono (2024a)). However, analyzing complex Timer profiles, typically seen flow cytometric data Foxp3-Tocky mice, remains challenging. Aim overcome challenges, applying machine learning methods attractive approach. current package family, TockyMachineLearning, provides comprehensive methods identifying feature cells represent group-specific features Timer profiles. Specifically, TockyRandomForest package offers Random Forest methods developed analyzing flow cytometric Fluorescent Timer data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"relationship-to-the-packages-tockyprep-and-tockylocus","dir":"Articles","previous_headings":"Introduction","what":"Relationship to the Packages TockyPrep and TockyLocus","title":"Introduction to TockyRandomForest Analysis","text":"TockyPrep package designed facilitate data preprocessing flow cytometric Fluorescent Timer data. Subsequently, TockyLocus package leverages preprocessed data apply data categorization methods, enabling quantitative analysis Timer Angle data (Bending et al. (2018)). However, approach applicable one-dimensional data . TockyRandomForest package utilizes special object class provided TockyPrep package perform advanced analyses multi-dimensional data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"getting-started-with-tockyrandomforest","dir":"Articles","previous_headings":"Introduction","what":"Getting Started with TockyRandomForest","title":"Introduction to TockyRandomForest Analysis","text":"begin using TockyRandomForest, need install TockyRandomForest TockyPrep packages GitHub:","code":"# Install TockyPrep and TockyRandomForest from GitHub devtools::install_github(\"MonoTockyLab/TockyPrep\") devtools::install_github(\"MonoTockyLab/TockyRandomForest\")"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"sample-workflow","dir":"Articles","previous_headings":"Introduction","what":"Sample Workflow","title":"Introduction to TockyRandomForest Analysis","text":"section guides typical analysis workflow using TockyRandomForest process flow cytometric data cells expressing Fluorescent Timer proteins. facilitate analysis, preprocessed data provided, TockyPrep package offers methods analyze data using S4 object class TockyPrepData. First, load necessary packages. Load example data included TockyRandomForest package follows: dataset generated analyzing T-cells Foxp3-Tocky mice (WT) CRISPR-mediated Foxp3-Tocky mutants, specifically CNS2KO Foxp3-Tocky mice (KO).","code":"library(TockyPrep) library(TockyRandomForest) # Example data load # Define the base path file_path <- system.file(\"extdata\", package = \"TockyRandomForest\") filenames <- list.files(path = file_path, pattern = 'rda') files <- file.path(file_path, filenames) for(i in files){load(i)}"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"tockykmeansrf-analysis","dir":"Articles","previous_headings":"Introduction","what":"TockyKmeansRF Analysis","title":"Introduction to TockyRandomForest Analysis","text":"Use TockyKmeansRF function apply TockyKmeansRF data: single analysis using TockyKmeansRF may yield highly efficient results test dataset.","code":"out <- TockyKmeansRF(trainData, testData) ## Train Data:  ##  ## Call: ##  randomForest(formula = group ~ ., data = cluster_train_data_wide,      ntree = 100)  ##                Type of random forest: classification ##                      Number of trees: 100 ## No. of variables tried at each split: 2 ##  ##         OOB estimate of  error rate: 0% ## Confusion matrix: ##    KO WT class.error ## KO 14  0           0 ## WT  0 12           0 ## Test Data:  ##     test_predictions ##      KO WT ##   KO  8 12 ##   WT  0 14 ## [1] \"Accuracy: 0.647058823529412\""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"tockykmeansrf-cluster-optimization","dir":"Articles","previous_headings":"Introduction","what":"TockyKmeansRF Cluster Optimization","title":"Introduction to TockyRandomForest Analysis","text":"can optimize number clusters use employing TockyRFClusterOptimization function:","code":"roc_results <- TockyRFClusterOptimization(trainData, testData, num_cluster_vec = c(6, 12, 15, 20, 25, 30), k = 50, ctrl_group = 'KO', expr_group = 'WT')  library(gridExtra) grid.arrange(grobs = roc_results$roc_plots)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"tockyrandomforest-analysis-for-feature-cell-identification","dir":"Articles","previous_headings":"Introduction","what":"TockyRandomForest Analysis for Feature Cell Identification","title":"Introduction to TockyRandomForest Analysis","text":"following sections, use cluster number 15. Use TockyRandomForestAnalysis function iteratively apply TockyKmeansRF data:  Use plotTockyRandomForestAnalysis function plot output. Using option plot = 'Importance Score', raw_timer = TRUE, feature cells can visualized Timer blue red fluorescence data.  Using option plot = 'ROC', ROC curve can plotted.","code":"result <- TockyRandomForestAnalysis(trainData, testData, percentile = 0.5, num_cluster = 15, k = 50, ROC = TRUE, verbose = FALSE, ctrl_group = 'KO', expr_group = 'WT') plotTockyRandomForestAnalysis(trainData, result, percentile = 0.5, select = FALSE, plot = 'Importance Score', raw_timer = TRUE) plotTockyRandomForestAnalysis(trainData, result, percentile = 0.5, select = FALSE, plot = 'ROC')"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"clustering-feature-cells","dir":"Articles","previous_headings":"Introduction > TockyRandomForest Analysis for Feature Cell Identification","what":"Clustering Feature Cells","title":"Introduction to TockyRandomForest Analysis","text":"Next, use output object result TockyRandomForestAnalysis cluster feature cells using DBScan clustering.","code":"cluster_result <- clusteringFeatureCells(trainData, result, percentile = 0.5, eps_value = 2, minPts_value = 4)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForest.html","id":"convex-hull-gating-for-feature-cells","dir":"Articles","previous_headings":"Introduction","what":"Convex Hull Gating for Feature Cells","title":"Introduction to TockyRandomForest Analysis","text":"use convex hull gating approach, obtain cluster IDs importance scores analyses . use plotHullsGating analyze percentage cells falling hull-gated feature cell clusters per sample.  output object plotHullsGating function includes violin plots illustrate group effects percentage cells within cluster. plots stored list object can organized grid layout using gridExtra package. can display follows:  statistical output can accessed follows:","code":"cluster_ids <- cluster_result$cluster cluster_ids <- sub(pattern = 0, replacement = 2, cluster_ids) importance_scores <- result$importance_score output <- plotHullsGating(trainData, importance_scores = importance_scores, cell_cluster_id = cluster_ids) library(gridExtra) grid.arrange(grobs = output$plot, ncol = 3) ## Warning: Removed 5 rows containing missing values or values outside the scale range ## (`geom_violin()`). show(output$stats) ##   Cluster     p_values   p_adjusted ## 1       1 4.038229e-05 4.038229e-05 ## 2       2 2.070886e-07 4.141773e-07"},{"path":[]},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"introduction-to-fluorescent-timer-and-the-tocky-system","dir":"Articles","previous_headings":"","what":"Introduction to Fluorescent Timer and the Tocky System","title":"Getting Started with TockyRandomForest Analysis","text":"Fluorescent Timer proteins change emission spectra time, serving powerful tools monitoring transcriptional dynamics vivo. recent efforts successfully implemented data preprocessing methods TockyPrep package (Ono (2024b)). Additionally, analyze Timer fluorescence dynamics apply quantitative statistical analysis methods, developed TockyLocus package (Ono (2024a)). However, analyzing complex Timer profiles, typically seen flow cytometric data Foxp3-Tocky mice, remains challenging. Aim overcome challenges, applying machine learning methods attractive approach. package suite, TockyMachineLearning, provides comprehensive methods identifying feature cells represent group-specific features Timer profiles. Specifically, current TockyRandomForest package offers Random Forest methods developed analyzing flow cytometric Fluorescent Timer data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"relationship-to-the-packages-tockyprep-and-tockylocus","dir":"Articles","previous_headings":"","what":"Relationship to the Packages TockyPrep and TockyLocus","title":"Getting Started with TockyRandomForest Analysis","text":"TockyPrep package designed facilitate data preprocessing flow cytometric Fluorescent Timer data. Subsequently, TockyLocus package leverages preprocessed data apply data categorization methods, enabling quantitative analysis Timer Angle data (Bending et al. (2018)). However, approach applicable one-dimensional data . TockyRandomForest package utilizes special object class TockyPrepData provided TockyPrep package perform machine learning analysis","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"install-tockyrandomforest","dir":"Articles","previous_headings":"","what":"Install TockyRandomForest","title":"Getting Started with TockyRandomForest Analysis","text":"begin using TockyRandomForest, need install TockyRandomForest TockyPrep packages GitHub:","code":"# Install TockyPrep and TockyRandomForest from GitHub devtools::install_github(\"MonoTockyLab/TockyPrep\") devtools::install_github(\"MonoTockyLab/TockyRandomForest\")"},{"path":[]},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"identifying-cns2-dependent-foxp3-transcriptional-dynamics","dir":"Articles","previous_headings":"Sample Workflow","what":"Identifying CNS2-dependent Foxp3 transcriptional dynamics","title":"Getting Started with TockyRandomForest Analysis","text":"section guides typical analysis workflow using TockyRandomForest process flow cytometric data cells expressing Fluorescent Timer proteins. facilitate analysis, preprocessed data provided, TockyPrep package offers methods analyze data using S4 object class TockyPrepData. First, load necessary packages. Load example TockyPrepData objects included TockyRandomForest package follows: dataset generated analyzing T-cells Foxp3-Tocky mice (WT) CRISPR-mediated Foxp3-Tocky mutants, specifically CNS2KO Foxp3-Tocky mice (KO). aim identify CNS2-dependent Foxp3 transcription dynamics Timer space data-oriented manner.","code":"library(TockyPrep) library(TockyRandomForest) library(gridExtra) # Example data load # Define the base path file_path <- system.file(\"extdata\", package = \"TockyRandomForest\") filenames <- list.files(path = file_path, pattern = 'CNS2.rda') files <- file.path(file_path, filenames) for(i in files){load(i)}"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"tockykmeansrf-analysis-for-feature-cell-identification","dir":"Articles","previous_headings":"Sample Workflow","what":"TockyKmeansRF Analysis for Feature Cell Identification","title":"Getting Started with TockyRandomForest Analysis","text":"use TockyKmeansRF function perform TockyRandomForest learning train_x testing test_y. Note two datasets independent . TockyKmeansRF function performs model training using training dataset model testing using independent test dataset.","code":"show(train_x) ## TockyPrepData Object: ## Total cell number: 1804517  ## Variables:  file, Angle, Intensity, FSC.A, CD25, PD1  ## Total sample number: 34  ## Groups:  KO, WT show(test_y) ## TockyPrepData Object: ## Total cell number: 1974400  ## Variables:  file, Angle, Intensity, FSC.A, CD44, CD25  ## Total sample number: 49  ## Groups:  KO, WT result_rf <- TockyKmeansRF(train_x, test_y, num_cluster = 18) ## Train Data:  ##  ## Call: ##  randomForest(formula = group ~ ., data = cluster_train_data_wide,      ntree = ntree)  ##                Type of random forest: classification ##                      Number of trees: 100 ## No. of variables tried at each split: 4 ##  ##         OOB estimate of  error rate: 0% ## Confusion matrix: ##    KO WT class.error ## KO 20  0           0 ## WT  0 14           0 ## Test Data:  ##     test_predictions ##      KO WT ##   KO 27  0 ##   WT  1 21 ## [1] \"Accuracy: 0.979591836734694\""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"clustering-feature-cells","dir":"Articles","previous_headings":"Sample Workflow > TockyKmeansRF Analysis for Feature Cell Identification","what":"Clustering Feature Cells","title":"Getting Started with TockyRandomForest Analysis","text":"Next, use output object result TockyRandomForestAnalysis cluster feature cells.  function ClusteringFeatureCells utilises DBScan algorithm. parameters eps minPts may need adjusted optimise clustering results. Use violinPlotFeatureCells analyse group-specific effects captured TockyKmeansRF model.","code":"plotImportanceScores(result_rf, percentile = 0.6) result_rf = ClusteringFeatureCells(result_rf, percentile = 0.6, eps = 2, minPts = 3) p = violinPlotFeatureCells(result_rf, ncol = 2) ## Warning: Removed 122 rows containing missing values or values outside the scale range ## (`geom_violin()`). plot(p)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"marker-expression-analysis","dir":"Articles","previous_headings":"Sample Workflow","what":"Marker Expression Analysis","title":"Getting Started with TockyRandomForest Analysis","text":"Lestly, analyse marker expression identified clusters.","code":"p2 <- violinClusterMFIPlot(test_y, result_rf, min_cells = 10, group = 'WT')"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/articles/TockyRandomForestAnalysis.html","id":"final-notes","dir":"Articles","previous_headings":"Sample Workflow","what":"Final Notes","title":"Getting Started with TockyRandomForest Analysis","text":"TockyRandomForest component comprehensive TockyMachineLearning package suite, designed support advanced machine learning analyses Tocky studies. Explore packages within suite fully leverage potential datasets!","code":""},{"path":[]},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Masahiro Ono. Author, maintainer.           0000-0002-9284-7326","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ono M (2025). TockyRandomForest: Random Forest Machine Learning Methods Flow Cytometric Fluorescent Timer Data. R package version 0.1.1, https://MonoTockyLab.github.io/TockyRandomForest, https://github.com/MonoTockyLab/TockyRandomForest.","code":"@Manual{,   title = {TockyRandomForest: Random Forest Machine Learning Methods for Flow Cytometric Fluorescent Timer Data},   author = {Masahiro Ono},   year = {2025},   note = {R package version 0.1.1, https://MonoTockyLab.github.io/TockyRandomForest},   url = {https://github.com/MonoTockyLab/TockyRandomForest}, }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/index.html","id":"tockyrandomforest-machine-learning-r-package-for-flow-cytometric-fluorescent-timer-analysis-beta-version","dir":"","previous_headings":"","what":"Random Forest Machine Learning Methods for Flow Cytometric Fluorescent Timer Data","title":"Random Forest Machine Learning Methods for Flow Cytometric Fluorescent Timer Data","text":"Author: Dr Masahiro OnoDate: 21 January 2025  TockyRandomForest R package part TockyMachineLearning package suite. TockyMachineLearning package suite comprises several subpackages designed facilitate advanced machine learning analyses flow cytometric data Fluorescent Timer reporters. package within suite specializes different aspects data handling analysis: TockyRandomForest: R package provides Random Forest analysis tools specifically tailored processing interpreting Fluorescent Timer data. TockyConvNetR: R package focused data preprocessing feature cell analysis suitable Convolutional Neural Network (ConvNet) analyses. package facilitates image conversion methods preparing Tocky data implements Inverse GradCAM Gating Analysis interpret ConvNet/Grad-CAM outputs. TockyConvNetPy: Python package dedicated performing ConvNet training conducting Grad-CAM analysis, complementing R-based preprocessing analysis tools. schematic figure providing overview workflows interactions within TockyMachineLearning suite.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyKmeansRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","title":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","text":"function integrates kmeans clustering Random Forest classification analyze flow cytometric Fluorescent Timer data. applies K-means clustering training test datasets data frame create clusters, matches clusters across datasets, uses Random Forest predict outcomes based relative proportions cells cluster.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyKmeansRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","text":"","code":"TockyKmeansRF(   trainData,   testData,   num_cluster = 4,   verbose = TRUE,   iter.max = 10,   nstart = 1,   mtry = NULL,   ntree = 100 )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyKmeansRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","text":"trainData Training dataset TockyPrepData testData Test dataset TockyPrepData. num_cluster number clusters (metaclusters) generate via k-means. verbose Logical indicating whether print progress messages outputs. Default TRUE. iter.max maximum number iterations allowed. passed kmeans. nstart number random sets used clustering.  passed kmeans. mtry number variables randomly sampled candidates split building tree within Random Forest. passed randomForest. ntree number trees grow Random Forest. default value set 100. passed randomForest.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyKmeansRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","text":"list containing key Tocky data Random Forest model performance data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyKmeansRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train and Evaluate TockyKmeansRF Model — TockyKmeansRF","text":"","code":"if (FALSE) { # \\dontrun{ result <- TockyKmeansRF(trainData, testData, num_cluster = 4, verbose = TRUE) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRFClusterOptimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","title":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","text":"function applies TockyKmeansRF model assess performance  clustering specified range cluster numbers repeats. evaluates model's performance calculating ROC curves, along confidence intervals, computes AUC curve across multiple runs.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRFClusterOptimization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","text":"","code":"TockyRFClusterOptimization(   trainData,   testData,   num_cluster_vec = 4:9,   k = 1,   ctrl_group = NULL,   expr_group = NULL,   iter.max = 10,   nstart = 1,   mtry = NULL,   ntree = 100 )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRFClusterOptimization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","text":"trainData Training dataset TockyPrepData object. testData Test dataset TockyPrepData object. num_cluster_vec numeric vector cluster numbers evaluate. k Integer, number iterations estimate confidence intervals. ctrl_group name control group within `sampledef`. expr_group name experimental group within `sampledef`. iter.max maximum number iterations allowed. passed kmeans. nstart number random sets used clustering.  passed kmeans. mtry number variables randomly sampled candidates split building tree within Random Forest. passed randomForest. ntree number trees grow Random Forest. default value set 100. passed randomForest.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRFClusterOptimization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","text":"list containing three elements: 'roc_results' list ROC curve objects cluster number, 'auc_values' list AUC values respective confidence intervals cluster configuration, 'roc_plots' list ggplot objects depicting ROC curve confidence intervals range specified clusters.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRFClusterOptimization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate ROC Curves with Confidence Intervals and Calculate AUC for TockyKmeansRF — TockyRFClusterOptimization","text":"","code":"if (FALSE) { # \\dontrun{ result <- TockyRFClusterOptimization(trainData, testData, num_cluster_vec = 4:9, k = 50) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRandomForestAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","title":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","text":"function performs TockyKmeansRF analysis across multiple runs optionally evaluates ROC curves calculates AUC run. can handle single number clusters vector cluster numbers. importance scores accumulated across runs, data plotted based scores.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRandomForestAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","text":"","code":"TockyRandomForestAnalysis(   trainData,   testData,   num_cluster = 16,   k = 100,   percentile = 0.5,   ROC = FALSE,   verbose = TRUE,   ctrl_group = NULL,   expr_group = NULL,   iter.max = 100,   nstart = 1 )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRandomForestAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","text":"trainData Training dataset TockyPrepData object. testData Test dataset TockyPrepData object. num_cluster single integer specifying number clusters evaluate. k Integer, number repetitions analysis. percentile Numeric, percentile threshold importance scores (0 1). ROC Logical, whether perform ROC analysis. verbose Logical indicating whether print progress messages outputs. Default TRUE. ctrl_group name control group within `sampledef`. expr_group name experimental group within `sampledef`. iter.max maximum number iterations allowed. passed kmeans. nstart number random sets used clustering.  passed kmeans.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRandomForestAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","text":"list containing accumulated importance scores, optional ROC results, AUC values, plots.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/TockyRandomForestAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform TockyKmeansRF Analysis with Optional ROC Evaluation — TockyRandomForestAnalysis","text":"","code":"if (FALSE) { # \\dontrun{ result <- TockyRandomForestAnalysis(trainData, testData, num_cluster = 16, k = 100, ROC = TRUE) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/calculate_barycenters.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Barycenters of Clusters — calculate_barycenters","title":"Calculate Barycenters of Clusters — calculate_barycenters","text":"function calculates barycenters cluster based 'Angle' 'Intensity' measurements using median values standardised data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/calculate_barycenters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Barycenters of Clusters — calculate_barycenters","text":"","code":"calculate_barycenters(data)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/calculate_barycenters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Barycenters of Clusters — calculate_barycenters","text":"data dataframe grouped clusters 'Angle' 'Intensity' values.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/calculate_barycenters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Barycenters of Clusters — calculate_barycenters","text":"dataframe summarizing mean 'Angle' 'Intensity' cluster.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/calculate_barycenters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Barycenters of Clusters — calculate_barycenters","text":"","code":"if (FALSE) { # \\dontrun{ barycenters <- calculate_barycenters(clustered_data) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/clusteringFeatureCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster Feature Cells — ClusteringFeatureCells","title":"Cluster Feature Cells — ClusteringFeatureCells","text":"function performs density-based clustering subset important data points","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/clusteringFeatureCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster Feature Cells — ClusteringFeatureCells","text":"","code":"ClusteringFeatureCells(   res_tockyrf,   percentile = 0.75,   eps = 4,   minPts = 2,   colors = NULL,   xlim = NULL,   ylim = NULL,   test = TRUE )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/clusteringFeatureCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster Feature Cells — ClusteringFeatureCells","text":"res_tockyrf list object output TockyKmeansRF. percentile numeric value defining cutoff filtering data based importance scores. eps epsilon parameter DBSCAN, controlling maximum distance points cluster. minPts minimum number points required form dense region DBSCAN. colors Optional. vector define colour code clusters. xlim Optional. x range Timer Blue-Red plot ylim Optional. y range Timer Blue-Red plot test Logical. default TRUE, enables analysis test data (recommended). Optionally, test = FALSE allows analysis training data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/clusteringFeatureCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster Feature Cells — ClusteringFeatureCells","text":"Prints plots directly may return statistical test results needed.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/clusteringFeatureCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster Feature Cells — ClusteringFeatureCells","text":"","code":"if (FALSE) { # \\dontrun{   clusteringFeatureCells(TockyData, result, percentile = 0.5) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/match_metaclusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","title":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","text":"function matches clusters training dataset clusters testing dataset based minimal Euclidean distance median-based centroids. cluster test set matched closest cluster training set, ensuring unique matches. matching minimizes total distance paired clusters across datasets.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/match_metaclusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","text":"","code":"match_metaclusters(barycenters_train, barycenters_test)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/match_metaclusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","text":"barycenters_train dataframe containing centroids clusters training set. row represents cluster columns `angle_median` `intensity_median`, median values angle intensity cluster, respectively. barycenters_test dataframe similar `barycenters_train` testing set.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/match_metaclusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","text":"numeric vector element index training set cluster matches corresponding test set cluster minimal Euclidean distance.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/match_metaclusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Metaclusters Between Training and Testing Sets — match_metaclusters","text":"","code":"if (FALSE) { # \\dontrun{ barycenters_train <- data.frame(angle_median = c(10, 20, 30, 40), intensity_median = c(100, 200, 300, 400)) barycenters_test <- data.frame(angle_median = c(9, 21, 31, 39), intensity_median = c(110, 210, 310, 390)) matches <- match_metaclusters(barycenters_train, barycenters_test) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/partitionTockyPrepData.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","title":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","text":"Split TockyPrepData object training testing sets.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/partitionTockyPrepData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","text":"","code":"partitionTockyPrepData(x, p = 0.7)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/partitionTockyPrepData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","text":"x TockyPrepData object. p numeric value 0 1 specifying proportion data use training set. Defaults 0.7.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/partitionTockyPrepData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","text":"list containing following elements:   * `trainData`: TockyPrepData object containing training data.   * `testData`: TockyPrepData object containing testing data.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/partitionTockyPrepData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a TockyPrepData object into training and testing sets. — partitionTockyPrepData","text":"","code":"if (FALSE) { # \\dontrun{ out <- partitionTockyPrepData(my_data) train_data <- out$trainData test_data <- out$testData } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotClustersMFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","text":"Generate boxplot MFI (median fluorescence intensity) cluster identified TockyKmeans.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotClustersMFI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","text":"","code":"plotClustersMFI(res_tockyrf, group = NULL, select = FALSE, variables = NULL)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotClustersMFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","text":"res_tockyrf list object output `TockyKmeansRF` group character vector specifying group(s) use analysis. NULL, groups used. select logical indicating whether allow interactive selection variables analysis. variables character vector specifying variables analyze. used `select` TRUE.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotClustersMFI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","text":"list containing following elements:   * `plot`: ggplot object boxplot.   * `data`: data frame containing summarized data used create plot.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotClustersMFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. — plotClustersMFI","text":"","code":"if (FALSE) { # \\dontrun{ plotMFIcluster(res_tockyrf) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotHullsGating.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically Plot Clusters and Their Convex Hulls — plotHullsGating","title":"Dynamically Plot Clusters and Their Convex Hulls — plotHullsGating","text":"function processes clustering results, plots cluster, overlays cluster's convex hull. adaptable number cell_cluster_id.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotHullsGating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically Plot Clusters and Their Convex Hulls — plotHullsGating","text":"","code":"plotHullsGating(   TockyData,   importance_scores,   cell_cluster_id,   percentile = 0.5,   p_adjust_method = \"BH\" )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotHullsGating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically Plot Clusters and Their Convex Hulls — plotHullsGating","text":"TockyData Training dataset TockyPrepData object. importance_scores numeric vector defining importance scores. can use slot importance_scores output object TockyRandomForestAnalysis. cell_cluster_id numeric vector. cluster slot output object clusteringFeatureCells cen used. percentile numeric value defining cutoff filtering data based importance scores. p_adjust_method method p-value adjustment multiple testing using Mann Whitney.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotHullsGating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically Plot Clusters and Their Convex Hulls — plotHullsGating","text":"","code":"if (FALSE) { # \\dontrun{   data <- data.frame(Angle = runif(100), Intensity = runif(100))   cell_cluster_id <- dbscan(data, eps = 0.1, minPts = 5)$cluster   plotHullsGating(data, cell_cluster_id) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotImportanceScores.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Importance Scores on Test Data — plotImportanceScores","title":"Plot Importance Scores on Test Data — plotImportanceScores","text":"function plots importance scores test data, showing Angle versus Intensity coloured feature importance derived RandomForest model, alongside colour bar representing importance score scale.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotImportanceScores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Importance Scores on Test Data — plotImportanceScores","text":"","code":"plotImportanceScores(   res_tockyrf,   percentile = 0.9,   test = TRUE,   plot_mode = \"Angle\",   xlim = NULL,   ylim = NULL )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotImportanceScores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Importance Scores on Test Data — plotImportanceScores","text":"res_tockyrf list object output TockyKmeansRF. percentile Numeric, percentile threshold importance scores (0 1). test Logical. TRUE, Importance Score plot using test data used creating TockyKmeansRF model used. FALSE, training data used instead. plot_mode Either \"raw_Timer\" Blue vs Red plots, \"Angle\" Angle vs Intensity plots. xlim Optional determine x ranges plot. Effective raw Timer plot . ylim Optional determine y ranges plot. Effective raw Timer plot .","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotImportanceScores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Importance Scores on Test Data — plotImportanceScores","text":"plot Angle vs Intensity coloured importance colour bar indicating         importance scores.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotImportanceScores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Importance Scores on Test Data — plotImportanceScores","text":"","code":"if (FALSE) { # \\dontrun{   # Assuming 'res_tockyrf' is already available from using TockyKmeansRF   plotImportanceScores(res_tockyrf) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyKmeansRF.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","title":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","text":"function generates Receiver Operating Characteristic (ROC) curve results obtained TockyKmeansRF function, specifically designed two-group comparisons. calculates area curve (AUC) confidence interval, returns ggplot object depicting ROC curve confidence bands.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyKmeansRF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","text":"","code":"plotTockyKmeansRF(   res_tockyrf,   expr_group = NULL,   ctrl_group = NULL,   mode = \"ROC\" )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyKmeansRF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","text":"res_tockyrf output object `TockyKmeansRF` expr_group name experimental group within `sampledef`. ctrl_group name control group within `sampledef`. mode character string specifying type plot generate. Valid options 'ROC' Receiver Operating Characteristic curve, 'PR' Precision-Recall curve. Defaults 'ROC'.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyKmeansRF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","text":"ggplot object representing ROC curve area shaded 95         interval around curve.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyKmeansRF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot ROC Curve from TockyKmeansRF Results — plotTockyKmeansRF","text":"","code":"if (FALSE) { # \\dontrun{ p <- plotTockyKmeansRF(res_tockyrf) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyRandomForestAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","title":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","text":"function provides visualization options results generated TockyRandomForestAnalysis. can plot ROC curves Importance Scores depending results available user selection.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyRandomForestAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","text":"","code":"plotTockyRandomForestAnalysis(   trainData,   result,   percentile = 0.75,   select = TRUE,   plot = NULL,   raw_timer = FALSE,   xlim = NULL,   ylim = NULL )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyRandomForestAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","text":"trainData original training dataset used TockyRandomForestAnalysis, expected object type TockyPrepData. result list object returned TockyRandomForestAnalysis containing components roc_plots importance_scores. percentile numeric threshold (0 1) used determine cut-highlighting important features importance score plot. Default 0.75. select Logical; TRUE, function prompt user select type plot display. FALSE, uses plot parameter determine plot type. plot Optional character string directly specify type plot select FALSE. Acceptable values \"Importance Score\" \"ROC\", corresponding plots generated. raw_timer Logical; TRUE, Timer blue red fluorescence data used, instead Timer Angle Intensity. xlim Optional numeric vector length 2, specifying limits x-axis plot. ylim Optional numeric vector length 2, specifying limits y-axis plot.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyRandomForestAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","text":"None; function called side effects (plotting).","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/plotTockyRandomForestAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Results of TockyRandomForestAnalysis — plotTockyRandomForestAnalysis","text":"","code":"if (FALSE) { # \\dontrun{ #'trainData' is TockyPrepData; 'result' is the output from TockyRandomForestAnalysis plotTockyRandomForestAnalysis(trainData, result, percentile = 0.75, select = TRUE) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/point_in_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if cells are inside a polygon gate — point_in_polygon","title":"Test if cells are inside a polygon gate — point_in_polygon","text":"Test cells inside polygon gate","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/point_in_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if cells are inside a polygon gate — point_in_polygon","text":"","code":"point_in_polygon(x, y, poly_coords)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/point_in_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if cells are inside a polygon gate — point_in_polygon","text":"x x coordinate test point. y y coordinate test point. poly_coords matrix two columns defines polygon.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/point_in_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if cells are inside a polygon gate — point_in_polygon","text":"data frame containing expression data. Note inherited values Gating Tocky object included.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/point_in_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if cells are inside a polygon gate — point_in_polygon","text":"","code":"if (FALSE) { # \\dontrun{  gate <- locator(type='l', col=2)  x.gate <- c(gate[[1]], gate[[1]][1])  y.gate <- c(gate[[2]], gate[[2]][1])  poly_coords = cbind(x.gate, y.gate) cd4_data <- point_in_polygon(x, y, poly_coords) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/reshape_data_for_rf.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","title":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","text":"function reshapes clustered data use Random Forest modeling. pivots data wider format cluster's percentage coverage per sample feature.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/reshape_data_for_rf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","text":"","code":"reshape_data_for_rf(data)"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/reshape_data_for_rf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","text":"data dataframe cluster assignments percentages sample.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/reshape_data_for_rf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","text":"dataframe wide format suitable Random Forest modeling, clusters features.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/reshape_data_for_rf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape Data for Random Forest Analysis — reshape_data_for_rf","text":"","code":"if (FALSE) { # \\dontrun{ wide_data <- reshape_data_for_rf(cluster_summary) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinClusterMFIPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. Generate a boxplot of MFI (median fluorescence intensity) for TockyKmeansRF Feature Clusters — violinClusterMFIPlot","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. Generate a boxplot of MFI (median fluorescence intensity) for TockyKmeansRF Feature Clusters — violinClusterMFIPlot","text":"function visualises marker MFI offeature clusters, Timer+ cells, Timer negative cells","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinClusterMFIPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. Generate a boxplot of MFI (median fluorescence intensity) for TockyKmeansRF Feature Clusters — violinClusterMFIPlot","text":"","code":"violinClusterMFIPlot(   x,   res_tockyrf,   group = NULL,   variables = NULL,   min_cells = 10,   Timer_positive = FALSE )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinClusterMFIPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. Generate a boxplot of MFI (median fluorescence intensity) for TockyKmeansRF Feature Clusters — violinClusterMFIPlot","text":"x `TockyPrepData` object containing original flow cytometry data. res_tockyrf list object output `TockyKmeansRF`, processed using `ClusteringFeatureCells`. group Optional. charaacter vector length one corresponding group plotted. default NULL, option uses samples groups. variables Optional. charaacter vector specify variables visualised. min_cells Numeric. minimum nunmber cells within cluster analysed. default 10. Timer_positive Logical. Whether remove Timer negative cells.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinClusterMFIPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a boxplot of MFI (median fluorescence intensity) for each cluster identified by TockyKmeans. Generate a boxplot of MFI (median fluorescence intensity) for TockyKmeansRF Feature Clusters — violinClusterMFIPlot","text":"","code":"if (FALSE) { # \\dontrun{   data <- data.frame(Angle = runif(100), Intensity = runif(100))   cell_cluster_id <- dbscan(data, eps = 0.1, minPts = 5)$cluster   plotHullsGating(data, cell_cluster_id) } # }"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinPlotFeatureCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Plots for Analysing Cluster Abundance — violinPlotFeatureCells","title":"Generate Plots for Analysing Cluster Abundance — violinPlotFeatureCells","text":"function processes clustering results, plots cluster, overlays cluster's convex hull. adaptable number cell_cluster_id.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinPlotFeatureCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Plots for Analysing Cluster Abundance — violinPlotFeatureCells","text":"","code":"violinPlotFeatureCells(   res_tockyrf,   p_adjust_method = \"BH\",   ncol = 3,   min_cells = 10,   scatter_plot = FALSE )"},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinPlotFeatureCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Plots for Analysing Cluster Abundance — violinPlotFeatureCells","text":"res_tockyrf list object output `TockyKmeansRF`, processed using `ClusteringFeatureCells`. p_adjust_method method p-value adjustment multiple testing using Mann Whitney. clusteringFeatureCells cen used. ncol Number columns output figure panel. min_cells Numeric. minimum nunmber cells within cluster analysed. default 10. scatter_plot Logical. TRUE, scatter plot Angle Intensity generated.","code":""},{"path":"https://MonoTockyLab.github.io/TockyRandomForest/reference/violinPlotFeatureCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Plots for Analysing Cluster Abundance — violinPlotFeatureCells","text":"","code":"if (FALSE) { # \\dontrun{   data <- data.frame(Angle = runif(100), Intensity = runif(100))   cell_cluster_id <- dbscan(data, eps = 0.1, minPts = 5)$cluster   plotHullsGating(data, cell_cluster_id) } # }"}]
